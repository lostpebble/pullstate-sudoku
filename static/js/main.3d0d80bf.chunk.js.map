{"version":3,"sources":["components/Grid.tsx","pullstate/PuzzleUndoRedo.ts","util.ts","pullstate/PuzzleStore.ts","components/PreStartComponent.tsx","components/Cell.tsx","components/PuzzleComponent.tsx","App.tsx","hooks/useWindowSize.ts","serviceWorker.ts","index.tsx"],"names":["Grid","direction","gap","justifyContent","justifyItems","align","children","style","display","gridAutoFlow","alignItems","changes","reverseChanges","offset","paths","PuzzleUndoRedo","usePatchesForUndoRedo","patches","inversePatches","targetIndex","length","slice","push","undo","PuzzleStore","applyPatches","redo","reset","Store","startedPuzzle","finishedPuzzle","filledBlocks","originalFilledBlocks","patchesFilter","filter","patch","some","path","every","part","index","listenToPatches","console","log","map","p","join","filteredPatches","filteredInversePatches","createReaction","s","watched","o","boardString","sudoku","board_grid_to_string","solvedBoardString","solve","print_board","allowedValuesArr","PuzzleActions","generateNewSudoku","level","sudokuString","generate","board_string_to_grid","originalFilled","update","editCell","x","y","value","includes","clearBoard","entries","row","cell","PreStartComponent","Button","variant","color","onClick","Cell","useStoreStateOpt","filledBlock","userSelect","borderRight","borderLeft","borderBottom","borderTop","wasOriginal","filledValue","className","type","onChange","event","target","PuzzleComponent","rowsOfCells","width","height","fillWith","arr","createFilled2DArray","key","App","started","finished","useEffect","end","Date","now","createdConfetti","confetti","create","interval","setInterval","clearInterval","startVelocity","spread","ticks","shapes","origin","Math","random","runFireworks","isClient","window","getSize","innerWidth","undefined","innerHeight","useState","windowSize","setWindowSize","addEventListener","handleResize","removeEventListener","useWindowSize","fontSizePx","min","round","fontSize","marginTop","Chip","icon","clickable","component","href","label","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d0d80bf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AlignItemsProperty, JustifyContentProperty, JustifyItemsProperty } from \"csstype\";\r\n\r\nexport interface IGridProps {\r\n  direction?: \"row\" | \"column\";\r\n  justifyContent?: JustifyContentProperty;\r\n  justifyItems?: JustifyItemsProperty;\r\n  align?: AlignItemsProperty;\r\n  gap?: number;\r\n}\r\n\r\nexport const Grid: React.FC<IGridProps> = ({\r\n  direction = \"row\",\r\n  gap = 1,\r\n  justifyContent = \"center\",\r\n  justifyItems = \"center\",\r\n  align = \"center\",\r\n  children,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"grid\",\r\n        gridAutoFlow: direction === \"column\" ? \"row\" : \"column\",\r\n        gap: `${gap}em`,\r\n        justifyContent,\r\n        justifyItems,\r\n        alignItems: align,\r\n      }}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import { Patch } from \"immer\";\r\nimport { PuzzleStore } from \"./PuzzleStore\";\r\n\r\n// PATCH LISTENER / UNDO / REDO\r\n\r\nlet changes: Patch[][] = [];\r\nlet reverseChanges: Patch[][] = [];\r\nlet offset = 0;\r\n\r\nfunction usePatchesForUndoRedo(patches: Patch[], inversePatches: Patch[]) {\r\n  const targetIndex = reverseChanges.length - offset;\r\n  offset = 0;\r\n\r\n  if (targetIndex >= 0) {\r\n    changes = changes.slice(0, targetIndex);\r\n    reverseChanges = reverseChanges.slice(0, targetIndex);\r\n  }\r\n\r\n  changes.push(patches);\r\n  reverseChanges.push(inversePatches);\r\n}\r\n\r\nfunction undo() {\r\n  const targetIndex = (reverseChanges.length - 1) - offset;\r\n\r\n  if (targetIndex >= 0 && reverseChanges[targetIndex]) {\r\n    offset += 1;\r\n    PuzzleStore.applyPatches(reverseChanges[targetIndex]);\r\n  }\r\n}\r\n\r\nfunction redo() {\r\n  const targetIndex = changes.length - offset;\r\n\r\n  if (targetIndex >= 0 && changes[targetIndex]) {\r\n    offset -= 1;\r\n    PuzzleStore.applyPatches(changes[targetIndex]);\r\n  }\r\n}\r\n\r\nfunction reset() {\r\n  changes = [];\r\n  reverseChanges = [];\r\n  offset = 0;\r\n}\r\n\r\nexport const PuzzleUndoRedo = {\r\n  usePatchesForUndoRedo,\r\n  undo,\r\n  redo,\r\n  reset\r\n}\r\n","import { Patch } from \"immer\";\r\n\r\nexport const createFilled2DArray = <T extends any = any>(\r\n  width: number,\r\n  height: number,\r\n  fillWith: (x: number, y: number) => T\r\n): T[][] => {\r\n  const arr: T[][] = [];\r\n\r\n  for (let y = 0; y < width; y += 1) {\r\n    arr.push([]);\r\n\r\n    for (let x = 0; x < height; x += 1) {\r\n      arr[y].push(fillWith(x, y));\r\n    }\r\n  }\r\n\r\n  return arr;\r\n};\r\n\r\nexport function createPatchesPathsFilter(paths: string[][]) {\r\n  return (patches: Patch[]): Patch[] => {\r\n    return patches.filter(patch =>\r\n      paths.some(path =>\r\n        path.every((part, index) => patch.path.length > index && (patch.path[index] === part || part === \"*\"))\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\n/*// path.every((part, index) => patch.path.length > index && (patch.path[index] === part || part === \"*\"))\r\n        // patch.path.every((part, index) => path.length > index && path[index] === part)*/\r\n","import { Store } from \"pullstate\";\r\nimport sudoku from \"sudoku-umd\";\r\nimport { Patch } from \"immer\";\r\nimport { createPatchesPathsFilter } from \"../util\";\r\nimport { PuzzleUndoRedo } from \"./PuzzleUndoRedo\";\r\n\r\ninterface IPuzzleStore {\r\n  startedPuzzle: boolean;\r\n  finishedPuzzle: boolean;\r\n  filledBlocks: string[][];\r\n  originalFilledBlocks: string[][];\r\n}\r\n\r\nexport const PuzzleStore = new Store<IPuzzleStore>({\r\n  startedPuzzle: false,\r\n  finishedPuzzle: false,\r\n  filledBlocks: [],\r\n  originalFilledBlocks: [],\r\n});\r\n\r\nconst patchesFilter = createPatchesPathsFilter([[\"filledBlocks\", \"*\"]]);\r\n\r\nPuzzleStore.listenToPatches((patches: Patch[], inversePatches: Patch[]) => {\r\n  console.log(patches.map(p => p.path.join(\".\")).join(\" ___ \"));\r\n  const filteredPatches = patchesFilter(patches);\r\n\r\n  if (filteredPatches.length > 0) {\r\n    const filteredInversePatches = patchesFilter(inversePatches);\r\n    PuzzleUndoRedo.usePatchesForUndoRedo(filteredPatches, filteredInversePatches);\r\n  }\r\n});\r\n\r\n// REACTIONS\r\n\r\n// If our board has changed, check if the user has won the game\r\nPuzzleStore.createReaction(\r\n  s => s.filledBlocks,\r\n  (watched, s, o) => {\r\n    if (o.startedPuzzle && watched.length > 0) {\r\n      const boardString = sudoku.board_grid_to_string(watched);\r\n      const solvedBoardString = sudoku.solve(boardString);\r\n\r\n      if (solvedBoardString) {\r\n        sudoku.print_board(solvedBoardString);\r\n      }\r\n\r\n      s.finishedPuzzle = boardString === solvedBoardString;\r\n    }\r\n  }\r\n);\r\n\r\n// ACTIONS\r\n\r\nfunction generateNewSudoku(level: \"easy\" | \"medium\" | \"hard\" | \"very-hard\") {\r\n  const sudokuString: string = sudoku.generate(level);\r\n  const filledBlocks: string[][] = sudoku.board_string_to_grid(sudokuString);\r\n  const originalFilled: string[][] = sudoku.board_string_to_grid(sudokuString);\r\n\r\n  PuzzleStore.update(s => {\r\n    s.filledBlocks = filledBlocks;\r\n    s.originalFilledBlocks = originalFilled;\r\n    s.startedPuzzle = true;\r\n  });\r\n}\r\n\r\nconst allowedValuesArr = [\"\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\n\r\nfunction editCell(x: number, y: number, value: string) {\r\n  if (allowedValuesArr.includes(value)) {\r\n    if (value === \"\") {\r\n      value = \".\";\r\n    }\r\n    PuzzleStore.update(s => {\r\n      s.filledBlocks[y][x] = value;\r\n    });\r\n  }\r\n}\r\n\r\nfunction reset() {\r\n  PuzzleUndoRedo.reset();\r\n  PuzzleStore.update(s => {\r\n    s.startedPuzzle = false;\r\n    s.finishedPuzzle = false;\r\n  });\r\n}\r\n\r\nfunction clearBoard() {\r\n  PuzzleStore.update((s, o) => {\r\n    // @ts-ignore\r\n    for (const [y, row] of o.originalFilledBlocks.entries()) {\r\n      for (const [x, cell] of row.entries()) {\r\n        s.filledBlocks[y][x] = cell;\r\n      }\r\n    }\r\n  }, PuzzleUndoRedo.usePatchesForUndoRedo);\r\n}\r\n\r\nexport const PuzzleActions = {\r\n  generateNewSudoku,\r\n  editCell,\r\n  reset,\r\n  clearBoard\r\n};\r\n","import { Button } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { Grid } from \"./Grid\";\r\nimport { PuzzleActions } from \"../pullstate/PuzzleStore\";\r\n\r\nexport const PreStartComponent = () => {\r\n  return (\r\n    <Grid justifyItems={\"center\"} gap={1}>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => {\r\n          PuzzleActions.generateNewSudoku(\"easy\");\r\n        }}>\r\n        Easy\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => {\r\n          PuzzleActions.generateNewSudoku(\"medium\");\r\n        }}>\r\n        Medium\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => {\r\n          PuzzleActions.generateNewSudoku(\"hard\");\r\n        }}>\r\n        Hard\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { CSSProperties } from \"react\";\r\nimport { useStoreStateOpt } from \"pullstate\";\r\nimport { PuzzleActions, PuzzleStore } from \"../pullstate/PuzzleStore\";\r\n\r\nexport interface ICellProps {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst borderStyle = `1px solid #667788`;\r\n\r\nexport const Cell = ({ x, y }: ICellProps) => {\r\n  const [filledBlock, originalFilled] = useStoreStateOpt(PuzzleStore, [\r\n    [\"filledBlocks\", y, x],\r\n    [\"originalFilledBlocks\", y, x],\r\n  ]);\r\n\r\n  const style: CSSProperties = {\r\n    userSelect: \"none\",\r\n  };\r\n\r\n  if ([2, 5].includes(x)) {\r\n    style.borderRight = borderStyle;\r\n  }\r\n\r\n  if ([3, 6].includes(x)) {\r\n    style.borderLeft = borderStyle;\r\n  }\r\n\r\n  if ([2, 5].includes(y)) {\r\n    style.borderBottom = borderStyle;\r\n  }\r\n\r\n  if ([3, 6].includes(y)) {\r\n    style.borderTop = borderStyle;\r\n  }\r\n\r\n  const wasOriginal = originalFilled !== \".\";\r\n  const filledValue = filledBlock !== \".\" ? filledBlock : \"\";\r\n\r\n  return (\r\n    <div style={style} className={`cell ${wasOriginal ? `original` : `editable`}`}>\r\n      {!wasOriginal && (\r\n        <input type={\"number\"} value={filledValue} onChange={event => PuzzleActions.editCell(x, y, event.target.value)} />\r\n      )}\r\n      {wasOriginal && <span className={`set-value`}>{filledValue}</span>}\r\n    </div>\r\n  );\r\n};\r\n","import React, { ReactElement } from \"react\";\r\nimport { Cell } from \"./Cell\";\r\nimport { createFilled2DArray } from \"../util\";\r\n\r\nexport const PuzzleComponent = () => {\r\n  const rowsOfCells: ReactElement[][] = createFilled2DArray(9, 9, (x, y) => (\r\n    <Cell key={`${x}${y}`} x={x} y={y} />\r\n  ));\r\n\r\n  return (\r\n    <div className={\"puzzle-container\"}>\r\n      {rowsOfCells.map((row, index) => (\r\n        <div key={index} className={\"row\"}>\r\n          {row}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { PreStartComponent } from \"./components/PreStartComponent\";\nimport { useStoreStateOpt } from \"pullstate\";\nimport { PuzzleComponent } from \"./components/PuzzleComponent\";\nimport { Button, Chip } from \"@material-ui/core\";\nimport confetti from \"canvas-confetti\";\nimport { Grid } from \"./components/Grid\";\nimport { useWindowSize } from \"./hooks/useWindowSize\";\nimport { GithubCircle } from \"mdi-material-ui\"\nimport { PuzzleActions, PuzzleStore } from \"./pullstate/PuzzleStore\";\nimport { PuzzleUndoRedo } from \"./pullstate/PuzzleUndoRedo\";\n\nfunction runFireworks() {\n  const end = Date.now() + 15 * 1000;\n\n  // @ts-ignore\n  const createdConfetti = confetti.create();\n\n  let interval: NodeJS.Timeout = setInterval(function() {\n    if (Date.now() > end) {\n      return clearInterval(interval);\n    }\n\n    createdConfetti({\n      startVelocity: 30,\n      spread: 360,\n      ticks: 60,\n      shapes: [\"square\"],\n      origin: {\n        x: Math.random(),\n        // since they fall down, start a bit higher than random\n        y: Math.random() - 0.2,\n      },\n    } as any);\n  }, 200);\n}\n\nconst App: React.FC = () => {\n  const [started, finished] = useStoreStateOpt(PuzzleStore, [[\"startedPuzzle\"], [\"finishedPuzzle\"]]);\n\n  useEffect(\n    () => {\n      if (finished) {\n        runFireworks();\n      }\n    },\n    [finished]\n  );\n\n  const { width } = useWindowSize();\n\n  let fontSizePx = Math.min(Math.round((width || 100) / 40), 20);\n\n  return (\n    <div style={{ fontSize: `${fontSizePx}px` }} className=\"App\">\n      {started && (\n        <Grid direction={\"column\"} gap={1}>\n          <Button\n            onClick={PuzzleActions.reset}\n            variant=\"contained\"\n            color=\"primary\">\n            Start New Puzzle\n          </Button>\n          <PuzzleComponent />\n          <Grid direction={\"row\"} gap={1}>\n            <Button onClick={PuzzleUndoRedo.undo} variant=\"outlined\" color=\"secondary\">\n              Undo\n            </Button>\n            <Button onClick={PuzzleUndoRedo.redo} variant=\"outlined\" color=\"secondary\">\n              Redo\n            </Button>\n            <Button onClick={PuzzleActions.clearBoard} variant=\"outlined\" color=\"secondary\">\n              Clear\n            </Button>\n          </Grid>\n        </Grid>\n      )}\n      {!started && <PreStartComponent />}\n      <div style={{ marginTop: \"5em\" }}>\n        <Chip\n          icon={<GithubCircle/>}\n          clickable\n          component={\"a\"}\n          color=\"primary\"\n          href={`https://github.com/lostpebble/pullstate-sudoku`}\n          target={\"_blank\"}\n          label=\"lostpebble/pullstate-sudoku\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { useEffect, useState } from \"react\";\r\n\r\ninterface IWindowSize {\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\nexport function useWindowSize(): IWindowSize {\r\n  const isClient = typeof window === \"object\";\r\n\r\n  function getSize(): IWindowSize {\r\n    return {\r\n      width: isClient ? window.innerWidth : undefined,\r\n      height: isClient ? window.innerHeight : undefined,\r\n    };\r\n  }\r\n\r\n  const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n  useEffect(() => {\r\n    if (!isClient) {\r\n      return;\r\n    }\r\n\r\n    function handleResize() {\r\n      setWindowSize(getSize());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return windowSize;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}